on: 
  push:
    branches: [main, master]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_date:
        description: 'Custom release date (defaults to current date)'
        required: false
        type: string

# Add permissions needed for creating releases
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest 
    name: Build and Test
    steps:
      - uses: actions/checkout@v4
      
      # Setup caching for apt packages to speed up installations
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-
      
      - name: Set execute permissions
        run: chmod +x ./compile.sh ./compile_all.sh ./watch.sh
      
      - name: Install WeasyPrint dependencies for better PDF text rendering
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc shellcheck python3-pip python3-cffi python3-brotli libpango-1.0-0 libharfbuzz0b libpangoft2-1.0-0 libfontconfig1
          sudo pip3 install weasyprint
          
          # Still install wkhtmltopdf as fallback for testing
          sudo apt-get install -y wkhtmltopdf
      
      - name: Create GitHub Actions specific PDF generation script
        run: |
          cat > ./compile_github_action.sh << 'EOF'
          #!/usr/bin/env bash
          set -e
          
          if [ "$#" -lt 1 ] || [ "$#" -gt 3 ] || ! [ -f "$1" ]; then
            echo "Usage:" >&2
            echo "$0 src/filename.md (pdf|html) [style_name]" >&2
            exit 1
          fi
          
          if [[ "pdf" != "$2" ]] && [[ "html" != "$2" ]]; then
            echo "invalid format, expected 'pdf' or 'html', got '$2'" >&2
            exit 1
          fi
          
          sourcefile="$1"
          format="$2"
          
          STYLE=$(pandoc -s "$sourcefile" --template extract_style.txt)
          
          if [ -z "$STYLE" ]; then
            echo "style not set in markdown front matter, using default" >&2
            STYLE=default
          fi
          
          if [ ! -d "styles/$STYLE" ]; then
            echo "style '$STYLE' doesn't exist, using default" >&2
            STYLE=default
          else 
            echo "using '$STYLE' style" >&2
          fi
          
          source_base=$(basename "$sourcefile" .md)
          
          # shellcheck disable=SC2012
          styles=$(ls -p styles/"${STYLE}"/*.css | sed "s/^/-c /" | tr "\n" " ")
          
          # Generate HTML file first
          pandoc -s -t html $styles "$sourcefile" -o "output/$source_base.html"
          
          if [[ "pdf" == "$2" ]]; then
            # Use WeasyPrint for PDF generation
            echo "Using WeasyPrint for PDF generation with selectable text"
            weasyprint -v "output/$source_base.html" "output/$source_base.pdf"
          fi
          EOF
          
          chmod +x ./compile_github_action.sh
      
      - name: Run shellcheck
        run: |
          shellcheck ./compile.sh
          shellcheck ./compile_all.sh
          shellcheck ./watch.sh
          shellcheck ./compile_github_action.sh
      
      - name: Create GitHub Actions specific build script
        run: |
          cat > ./compile_all_github_action.sh << 'EOF'
          #!/usr/bin/env bash
          set -e
          
          FILES="src/*"
          for f in $FILES
          do
            echo "Processing $f file..."
            echo "compiling pdf..."
            ./compile_github_action.sh "$f" pdf
            echo "compiling html.."
            ./compile_github_action.sh "$f" html
            echo "DONE!"
          done
          EOF
          
          chmod +x ./compile_all_github_action.sh
      
      - name: Build CV files with WeasyPrint PDF engine
        run: ./compile_all_github_action.sh
      
      - name: Verify output files exist
        run: |
          test -f ./output/NguyenTruongAn_CV.pdf || { echo "NguyenTruongAn_CV.pdf not found"; exit 1; }
          test -f ./output/NguyenTruongAn_CV.html || { echo "NguyenTruongAn_CV.html not found"; exit 1; }
          
      - name: Test clean operation
        run: |
          make clean
          test ! -f ./output/NguyenTruongAn_CV.pdf || { echo "NguyenTruongAn_CV.pdf not removed"; exit 1; }
          test ! -f ./output/NguyenTruongAn_CV.html || { echo "NguyenTruongAn_CV.html not removed"; exit 1; }
          
      - name: Rebuild for artifact
        run: ./compile_all_github_action.sh

      - uses: actions/upload-artifact@v4
        with:
          name: cv-outputs
          path: output/
      
      - name: Get current date and timestamp
        id: datetime
        run: |
          echo "DATE=$(date +'%d-%B-%Y')" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.datetime.outputs.DATE }}-${{ steps.datetime.outputs.TIMESTAMP }}
          release_name: CV Release ${{ steps.datetime.outputs.DATE }}
          draft: false
          prerelease: false
      
      - name: Create Manual Release
        id: create_manual_release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_date != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.event.inputs.release_date || steps.datetime.outputs.DATE }}-${{ steps.datetime.outputs.TIMESTAMP }}
          release_name: CV Release ${{ github.event.inputs.release_date || steps.datetime.outputs.DATE }}
          draft: false
          prerelease: false
      
      - name: Get Release Info
        id: get_release
        if: github.event_name == 'release'
        run: echo "UPLOAD_URL=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT
      
      - name: Upload PDF Asset
        if: github.event_name == 'release' || github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_date != '')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event_name == 'release' && steps.get_release.outputs.UPLOAD_URL || github.event_name == 'workflow_dispatch' && github.event.inputs.release_date != '' && steps.create_manual_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ./output/NguyenTruongAn_CV.pdf
          asset_name: NguyenTruongAn_CV.pdf
          asset_content_type: application/pdf
      
      - name: Upload HTML Asset
        if: github.event_name == 'release' || github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_date != '')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event_name == 'release' && steps.get_release.outputs.UPLOAD_URL || github.event_name == 'workflow_dispatch' && github.event.inputs.release_date != '' && steps.create_manual_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ./output/NguyenTruongAn_CV.html
          asset_name: NguyenTruongAn_CV.html
          asset_content_type: text/html
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          publish_branch: gh-pages
          force_orphan: true
